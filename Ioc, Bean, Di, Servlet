Ioc
=> 객체의 생성과 관리를 개발자가 아닌 Spring  프레임워크가 담당하는 개념

개발자는 필요한 객체들만 선언해 두고, Spring이 알아서 적절한 객체를 주입하는 형태


- Ioc 컨테이너 작동 방식
1. 객체를 class로 정의
2. 객체들 간의 연관성 지정 : Spring 설정 파일 또는 어노테이션을 통해 객체들이 어떻게 연결될지 지정해준다.
3. Ioc 컨테이너가 이 정보를 바탕으로 객체들을 생성하고 필요한 곳에 주입

Bean
-> Spring 컨테이너가 관리하는 자바의 객체를 의미한다.
ApplicationContext.getBean() 함수를 호출했을 때 얻어질 수 있는 것이 Spring의 빈
빈을 통해 객체를 인스턴스화한 후 객체 간의 의존 관계를 관리한다.

*인스턴스화 : 클래스를 통해 객체를 생성한 것을 의미함.

예전엔 객체를 직접 생성하는 방식을 사용함(new 생성자)

Bean으로 등록하여 관리하는 방식
[1] 묵시적 빈 정의
Component -> Autowired 클래스에 어노테이션을 추가하고 다른 클래스에서 해당 Bean을 끌어온다.

[2] 명시적 빈 정의
Configuration -> Bean Spring 설정 파일에 Configuration 어노테이션을 추가하고, Bean 어노테이션을 붙여 명시적으로 빈을 지정한다.

즉, Componenet 어노테이션을 사용하면 Bean이 저절로 생성 클래스에서 다른 클래스의 빈을 사용하고 싶으면 Autowired

Spring DI
=> 우리나라 말로 의존성 주입
객차게 생성자 인수, 메서드에 대한, 팩토리 메서드에서 생성되거나 반환된 후에, 객체 인스턴스에 설정된 속성을 통해서만 종속성을 정의하는 프로세스

의존성 주입을 왜 외부로부터 주입받아야 되냐??
why?? => 쉽게 말해서 일체형이기 때문 만약 문제가 생기면 클래스 간에 전체 수정이 필요함. 그렇다면 아무래도 비효율적 
이걸 강한 결합이라 말함
반면 느슨한 결합은 분리형 간단히 구현체 클래스를 하나 정의해주면 끝 즉, 자체 수정만 해주면 단점 보완

Spring 서블릿이란?
웹 애플리케이션에서 클라이언트의 요청을 처리하고, 그에 대한 응답을 생성하는 중요한 구성 요소
즉, 자바에서 웹 애플리케이션을 만들 때 HTTP 요청을 처리하는 역할

Requset로 사용자의 아이디 패스워드가 들어가면 로그인 후 페이지를 전송해야 한다. 사용자의 로그인 정보를 받아 확인 후
다음 페이지를 보내는 프로그램이 바로 서블릿

서블릿 컨테이너
=> 서블릿을 관리해주는 컨테이너 역할
서블릿이 어떤 역할을 수행하는 메뉴얼이라면 servelt 컨테이너는 해당 메뉴얼을 보고 직접 핸들링한다고 생각

즉 클라이언트의 요청을 받아주고 응답 할 수 있게, 웹 서버와 Socket으로 통하는 역할

Spring DispatcherServlet
=> 이는 front Controller 패턴을 구현한 서블릿으로 모든 Http 요청을 받는 역할
이 후 요청을 적절한 Controleer로 전달하고, 로직을 실행한 후에 응답을 생성해준다.
